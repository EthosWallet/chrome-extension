name: Build & Test
on: push
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Setup Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: '18'

            # Speed up subsequent runs with caching
            - name: Cache node modules
              uses: actions/cache@v2
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
                      ${{ runner.os }}-build-
                      ${{ runner.os }}-

            # Install required deps for action
            - name: Install Dependencies
              run: npm install

            # Finally, build the chrome extension
            - name: Build Chrome Extension
              env:
                  MASTER_PASSPHRASE: ${{ secrets.MASTER_PASSPHRASE }}
                  GROWTHBOOK_API_KEY: ${{ secrets.GROWTHBOOK_API_KEY }}
                  ERROR_REPORT_PRIVATE_KEY: ${{ secrets.ERROR_REPORT_PRIVATE_KEY }}
                  API_ENDPOINT_DEVNET_FULLNODE: ${{ secrets.API_ENDPOINT_DEVNET_FULLNODE }}
                  API_ENDPOINT_TESTNET_FULLNODE: ${{ secrets.API_ENDPOINT_TESTNET_FULLNODE }}
                  API_ENDPOINT_MAINNET_FULLNODE: ${{ secrets.API_ENDPOINT_MAINNET_FULLNODE }}
                  API_ENDPOINT_DEVNET_FULLNODE_2: ${{ secrets.API_ENDPOINT_DEVNET_FULLNODE_2 }}
                  API_ENDPOINT_TESTNET_FULLNODE_2: ${{ secrets.API_ENDPOINT_TESTNET_FULLNODE_2 }}
                  API_ENDPOINT_MAINNET_FULLNODE_2: ${{ secrets.API_ENDPOINT_MAINNET_FULLNODE_2 }}
                  API_ENDPOINT_DEVNET_FULLNODE_3: ${{ secrets.API_ENDPOINT_DEVNET_FULLNODE_3 }}
                  API_ENDPOINT_TESTNET_FULLNODE_3: ${{ secrets.API_ENDPOINT_TESTNET_FULLNODE_3 }}
                  API_ENDPOINT_MAINNET_FULLNODE_3: ${{ secrets.API_ENDPOINT_MAINNET_FULLNODE_3 }}
                  ETHOS_API_KEY: ${{ secrets.ETHOS_API_KEY }}
                  ETHOS_API_BASE_URL: ${{ secrets.ETHOS_API_BASE_URL }}
                  ETHOS_EXPLORER_BASE_URL: ${{ secrets.ETHOS_EXPLORER_BASE_URL }}
                  TENANT_ID: ${{ secrets.TENANT_ID }}
              run: npm run build:prod

            # Archive build artifacts
            - name: Archive build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: ethos-wallet-extension
                  path: dist

            - name: Notify if broken
              uses: sarisia/actions-status-discord@v1
              if: failure() && github.ref == 'refs/heads/main'
              with:
                  username: Eye in the Sky

                  # This is the "engineers" Role on discord
                  content: 'Hey <@&1067854101469204480>'
                  title: 'NPM Build'
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}

    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Setup Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: '18'

            # Speed up subsequent runs with caching
            - name: Cache node modules
              uses: actions/cache@v2
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
                      ${{ runner.os }}-build-
                      ${{ runner.os }}-

            # Install required deps for action
            - name: Install Dependencies
              run: npm install

            # Finally, build the chrome extension
            - name: Run Tests
              run: DEBUG_PRINT_LIMIT=10000000 NODE_OPTIONS="--max-old-space-size=4096" npm test

            - name: Notify if broken
              uses: sarisia/actions-status-discord@v1
              if: failure() && github.ref == 'refs/heads/main'
              with:
                  username: Eye in the Sky

                  # This is the "engineers" Role on discord
                  content: 'Hey <@&1067854101469204480>'
                  title: 'Jest Tests'
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
